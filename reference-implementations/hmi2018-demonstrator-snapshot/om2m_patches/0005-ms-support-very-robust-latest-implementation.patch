From a17650b171ec74f26d3c95f5331bb055b912ac68 Mon Sep 17 00:00:00 2001
From: Michael Schoeffler <michael.schoeffler@de.bosch.com>
Date: Wed, 4 Apr 2018 10:30:27 +0200
Subject: [PATCH 6/6] ms support + very robust latest implementation

---
 .../org/eclipse/om2m/commons/utils/Util.java  |  2 +-
 .../controller/LatestOldestController.java    |  3 +-
 .../eclipselink/internal/DAOFactoryImpl.java  |  7 +++
 .../eclipselink/internal/dao/LatestDAO.java   | 57 +++++++++++++++++++
 .../persistence/mongodb/DAOFactoryImpl.java   |  5 ++
 .../om2m/persistence/service/DAOFactory.java  |  2 +
 6 files changed, 73 insertions(+), 3 deletions(-)
 create mode 100644 org.eclipse.om2m.persistence.eclipselink/src/main/java/org/eclipse/om2m/persistence/eclipselink/internal/dao/LatestDAO.java

diff --git a/org.eclipse.om2m.commons/src/main/java/org/eclipse/om2m/commons/utils/Util.java b/org.eclipse.om2m.commons/src/main/java/org/eclipse/om2m/commons/utils/Util.java
index 64eaf65..fc0a52b 100644
--- a/org.eclipse.om2m.commons/src/main/java/org/eclipse/om2m/commons/utils/Util.java
+++ b/org.eclipse.om2m.commons/src/main/java/org/eclipse/om2m/commons/utils/Util.java
@@ -38,7 +38,7 @@ import org.apache.commons.logging.LogFactory;
  */
 public class Util {
 	
-	protected static String dateFormat = System.getProperty("org.eclipse.om2m.date.format", "yyyyMMdd'T'HHmmss");
+	protected static String dateFormat = System.getProperty("org.eclipse.om2m.date.format", "yyyyMMdd'T'HHmmssSSS");
 //	protected static String dateFormat = "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZ";
 
 	/** Private consctructor */
diff --git a/org.eclipse.om2m.core/src/main/java/org/eclipse/om2m/core/controller/LatestOldestController.java b/org.eclipse.om2m.core/src/main/java/org/eclipse/om2m/core/controller/LatestOldestController.java
index e1738e9..350485b 100644
--- a/org.eclipse.om2m.core/src/main/java/org/eclipse/om2m/core/controller/LatestOldestController.java
+++ b/org.eclipse.om2m.core/src/main/java/org/eclipse/om2m/core/controller/LatestOldestController.java
@@ -82,8 +82,7 @@ public class LatestOldestController extends Controller{
 		}
 		switch(this.policy){
 		case LATEST:
-			cinEntity = containerEntity.getChildContentInstances().get(
-					containerEntity.getChildContentInstances().size()-1);
+			cinEntity = dbs.getDAOFactory().getLatestDAO().find(transaction, request.getTargetId());
 			break;
 		case OLDEST:
 			cinEntity = dbs.getDAOFactory().getOldestDAO().find(transaction, request.getTargetId());
diff --git a/org.eclipse.om2m.persistence.eclipselink/src/main/java/org/eclipse/om2m/persistence/eclipselink/internal/DAOFactoryImpl.java b/org.eclipse.om2m.persistence.eclipselink/src/main/java/org/eclipse/om2m/persistence/eclipselink/internal/DAOFactoryImpl.java
index 5347960..fc03fb5 100644
--- a/org.eclipse.om2m.persistence.eclipselink/src/main/java/org/eclipse/om2m/persistence/eclipselink/internal/DAOFactoryImpl.java
+++ b/org.eclipse.om2m.persistence.eclipselink/src/main/java/org/eclipse/om2m/persistence/eclipselink/internal/DAOFactoryImpl.java
@@ -53,6 +53,7 @@ import org.eclipse.om2m.persistence.eclipselink.internal.dao.FlexContainerAnncDA
 import org.eclipse.om2m.persistence.eclipselink.internal.dao.FlexContainerDAO;
 import org.eclipse.om2m.persistence.eclipselink.internal.dao.GroupDAO;
 import org.eclipse.om2m.persistence.eclipselink.internal.dao.LabelDAO;
+import org.eclipse.om2m.persistence.eclipselink.internal.dao.LatestDAO;
 import org.eclipse.om2m.persistence.eclipselink.internal.dao.NodeEntityDAO;
 import org.eclipse.om2m.persistence.eclipselink.internal.dao.OldestDAO;
 import org.eclipse.om2m.persistence.eclipselink.internal.dao.PollingChannelDAO;
@@ -188,4 +189,10 @@ public class DAOFactoryImpl implements DAOFactory {
 	public DAO<ContentInstanceEntity> getOldestDAO() {
 		return new OldestDAO();
 	}
+	
+	@Override
+	public DAO<ContentInstanceEntity> getLatestDAO() {
+		return new LatestDAO();
+	}
+	
 }
diff --git a/org.eclipse.om2m.persistence.eclipselink/src/main/java/org/eclipse/om2m/persistence/eclipselink/internal/dao/LatestDAO.java b/org.eclipse.om2m.persistence.eclipselink/src/main/java/org/eclipse/om2m/persistence/eclipselink/internal/dao/LatestDAO.java
new file mode 100644
index 0000000..f26f7ae
--- /dev/null
+++ b/org.eclipse.om2m.persistence.eclipselink/src/main/java/org/eclipse/om2m/persistence/eclipselink/internal/dao/LatestDAO.java
@@ -0,0 +1,57 @@
+/*******************************************************************************
+ * Copyright (c) 2017 Sensinov (www.sensinov.com)
+ * 41 Rue de la découverte 31676 Labège - France 
+ *
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Initial Contributors:
+ *     Mahdi Ben Alaya - benalaya@sensinov.com
+ *
+ * New contributors :
+ *******************************************************************************/
+package org.eclipse.om2m.persistence.eclipselink.internal.dao;
+
+import java.util.List;
+
+import javax.persistence.Query;
+
+import org.eclipse.om2m.commons.constants.DBEntities;
+import org.eclipse.om2m.commons.entities.ContentInstanceEntity;
+import org.eclipse.om2m.persistence.eclipselink.internal.DBTransactionJPAImpl;
+import org.eclipse.om2m.persistence.service.DBTransaction;
+
+/**
+ * DAO for the content instance entity
+ *
+ */
+public class LatestDAO extends AbstractDAO<ContentInstanceEntity> {
+
+	@Override
+	public void create(DBTransaction dbTransaction,
+			ContentInstanceEntity resource) {
+		// NOT AVAILABLE
+	}
+	
+	@Override
+	public ContentInstanceEntity find(DBTransaction dbTransaction, Object id) {
+		ContentInstanceEntity result = null;
+
+		DBTransactionJPAImpl transaction = (DBTransactionJPAImpl) dbTransaction;
+		String req = "SELECT r FROM " + DBEntities.CONTENTINSTANCE_ENTITY
+				+ " r WHERE r.parentID = '"+ id + "' ORDER BY r.creationTime DESC";
+		
+		Query q = transaction.getEm().createQuery(req);
+		List<ContentInstanceEntity> resultList = q.setMaxResults(1).getResultList();
+		if (resultList.size() == 1) {
+			result = resultList.get(0);
+		}
+		return result;
+	}
+
+	@Override
+	public void delete(DBTransaction dbTransaction,	ContentInstanceEntity resource) {
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.om2m.persistence.mongodb/src/main/java/org/eclipse/om2m/persistence/mongodb/DAOFactoryImpl.java b/org.eclipse.om2m.persistence.mongodb/src/main/java/org/eclipse/om2m/persistence/mongodb/DAOFactoryImpl.java
index 0d0358a..eb48d64 100644
--- a/org.eclipse.om2m.persistence.mongodb/src/main/java/org/eclipse/om2m/persistence/mongodb/DAOFactoryImpl.java
+++ b/org.eclipse.om2m.persistence.mongodb/src/main/java/org/eclipse/om2m/persistence/mongodb/DAOFactoryImpl.java
@@ -177,4 +177,9 @@ public class DAOFactoryImpl implements DAOFactory {
 		return new AeByAppIdDAO();
 	}
 
+	@Override
+	public DAO<ContentInstanceEntity> getLatestDAO() {
+		throw new RuntimeException("Not implemented yet.");
+	}
+
 }
diff --git a/org.eclipse.om2m.persistence.service/src/main/java/org/eclipse/om2m/persistence/service/DAOFactory.java b/org.eclipse.om2m.persistence.service/src/main/java/org/eclipse/om2m/persistence/service/DAOFactory.java
index f6c1ded..75d36bc 100644
--- a/org.eclipse.om2m.persistence.service/src/main/java/org/eclipse/om2m/persistence/service/DAOFactory.java
+++ b/org.eclipse.om2m.persistence.service/src/main/java/org/eclipse/om2m/persistence/service/DAOFactory.java
@@ -92,4 +92,6 @@ public interface DAOFactory {
 
 	public abstract DAO<ContentInstanceEntity> getOldestDAO();
 
+	public abstract DAO<ContentInstanceEntity> getLatestDAO();
+
 }
-- 
2.17.1.windows.2

