; Comments must start with ; all other lines will be present in the corresponding file
; Indicate a source-code file by $FILE_ENDING$-tag and the corresponding file ending
; at the end of the file. i.e.: "$FILE_ENDING cpp". If $FILE_ENDING$ is not set, ".hpp" will be used.
; Other tags that can be used are:
; $ENUM_CLASS$  : Class name of enum, obtained from file name
; $FIRST_ENUM$  : The first enum in the list of enums
; $MIDDLE_ENUM$ : All enums that are in between first and last enum.
; $LAST_ENUM$   : The last enum in the list of enums
; $SIZE$        : The number of enums
; $CONSTANT$    : Define a costant, i.e.: $CONSTSANT$ NAME value, usage in document with $NAME$
;
;
$CONSTANT$ NAMESPACE submodel
#include <memory>

namespace basyx {
namespace $NAMESPACE$ {

enum class $ENUM_CLASS${
    $FIRST_ENUM$,
    $MIDDLE_ENUM$,
    $LAST_ENUM$
};

static const std::array<std::pair<const char*, $ENUM_CLASS$>, $SIZE$> string_to_$ENUM_CLASS$ = 
{{
    std::pair<const char*, $ENUM_CLASS$>("$FIRST_ENUM$", $ENUM_CLASS$::$FIRST_ENUM$),
    std::pair<const char*, $ENUM_CLASS$>("$MIDDLE_ENUM$", $ENUM_CLASS$::$MIDDLE_ENUM$),
    std::pair<const char*, $ENUM_CLASS$>("$LAST_ENUM$", $ENUM_CLASS$::$LAST_ENUM$)
}};

template<class $ENUM_CLASS$>
$ENUM_CLASS$ from_string(const std::string name);
std::string to_string($ENUM_CLASS$ enum_elem);

}
}

$FILE_ENDING$ h
#include <BaSyx/$NAMESPACE$/map/$ENUM_CLASS$.h>

#include <string>
#include <algorithm>

template<>
basyx::$NAMESPACE$::$ENUM_CLASS$ basyx::$NAMESPACE$::from_string<basyx::$NAMESPACE$::$ENUM_CLASS$>(const std::string name)
{
    auto pair = std::find_if(string_to_$ENUM_CLASS$.begin(), string_to_$ENUM_CLASS$.end(), [name](std::pair<const char*, $ENUM_CLASS$> pair) {return not name.compare(pair.first);});
    return pair->second;
}

std::string basyx::$NAMESPACE$::to_string($ENUM_CLASS$ enum_elem)
{
    auto pair = std::find_if(string_to_$ENUM_CLASS$.begin(), string_to_$ENUM_CLASS$.end(), [enum_elem](std::pair<const char*, $ENUM_CLASS$> pair) {return enum_elem == pair.second;});
    return pair->first;
}
$FILE_ENDING$ cpp
