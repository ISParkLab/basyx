@page
@model BaSyx.AAS.Server.Http.Pages.IndexModel
@using BaSyx.API.Components;
@using BaSyx.Models.Core.AssetAdministrationShell;
@using BaSyx.Models.Core.AssetAdministrationShell.Generics;
@using BaSyx.Models.Core.AssetAdministrationShell.Identification;
@using BaSyx.Models.Core.AssetAdministrationShell.References;
@using BaSyx.Models.Core.Common;
@using BaSyx.Models.Extensions;
@using BaSyx.Models.Core.AssetAdministrationShell.Semantics;
@using BaSyx.Utils.Settings.Types;
@using Microsoft.AspNetCore.Html;
@using Microsoft.AspNetCore.Hosting;
@using System.Security.Cryptography;
@using System.Text;
@using System.Text.RegularExpressions;

@{
    ViewData["Title"] = "Index";
    IAssetAdministrationShellServiceProvider sp = Model.ServiceProvider;
    IAssetAdministrationShell aas = sp.GetBinding();
    IWebHostEnvironment hostingEnvironment = Model.HostingEnvironment;
    ServerSettings settings = Model.Settings;

    string pathToCompanyLogo = settings.Miscellaneous.TryGetValue("CompanyLogo", out string path) ? path : "/images/Bosch.gif";
    string eClassLink = "https://www.eclasscontent.com/index.php?action=cc2prdet&language=en&version=10.1&id=&pridatt=";

    Func<Identifier, IHtmlContent> ShowIdentification = @<text>@{
    var identifier = item;
    @if (identifier != null)
    {
        <div class="panel-body">
            <div class="row">
                <div class="col-sm-2"><b>Identifier (@identifier.IdType.ToString())</b></div>
                <div class="col-sm-10">@identifier.Id</div>
            </div>
        </div>
    }
}</text>;

Func<string, IHtmlContent> ShowIdShort = @<text>@{
var idShort = item;
@if (!string.IsNullOrEmpty(idShort))
{

    <div class="panel-body">
        <div class="row">
            <div class="col-sm-2"><b>IdShort</b></div>
            <div class="col-sm-10">@idShort</div>
        </div>
    </div>
}
}</text>;

Func<IReference, IHtmlContent> ShowSemanticId = @<text>@{
var reference = item;
@if (reference?.First?.Value != null)
{

    <div class="panel-body">
        <div class="row">
            <div class="col-sm-2"><b>SemanticId</b></div>
            @if (reference.IsEClassReference())
            {
                {
                    string link = eClassLink + Uri.EscapeDataString(reference.First.Value);
                    <div class="col-sm-10"><a target="_blank" href="@link">@reference.First.Value (eCl@ss)</a></div>
                }
            }
            else if (reference.IsIsoReference())
            {
                <div class="col-sm-10">@reference.First.Value (CDD)</div>
            }
            else
            {
                <div class="col-sm-10">@reference.ToStandardizedString()</div>
            }
        </div>
    </div>
}
}</text>;


Func<LangStringSet, IHtmlContent> ShowDescription = @<text>@{
var langStringCollection = item;
@if (langStringCollection?.Count > 0)
{
    string description = string.Empty;
    for (int i = 0; i < langStringCollection.Count; i++)
    {
        <div class="panel-body">
            <div class="row">
                <div class="col-sm-2"><b>Description[@langStringCollection[i].Language]</b></div>
                <div class="col-sm-10">@langStringCollection[i].Text</div>
            </div>
        </div>
    }
}
}</text>;

Func<IValue, IHtmlContent> ShowValue = @<text>@{
var value = item;
if (value.ValueType == null)
{
    var serialized = Json.Serialize(value.Value).ToString();
    @serialized
}
else
{
    @value.Value?.ToString()
}
}</text>;


Func<string, string, IProperty, IHtmlContent> ShowPropertyFooter = (submodelId, pathId, property) => new Func<object, Microsoft.AspNetCore.Mvc.Razor.HelperResult>(@<text>@{

if (string.IsNullOrEmpty(submodelId) || string.IsNullOrEmpty(pathId) || property == null)
{
    return;
}
else
{
    string relativeSubmodelElementPath = string.Join("/", pathId.Split(new char[] { '/' }, StringSplitOptions.RemoveEmptyEntries).SkipWhile(p => p != submodelId).Skip(1));
    <div class="panel-footer">
        <div class="row">
            <div class="col-sm-8">

                <div class="input-group">
                    <span class="input-group-addon"><i class="glyphicon glyphicon-pencil"></i></span>
                    <input id="@GetHashString(pathId + ";Input")" type="text" class="form-control" placeholder="Value" value="@ShowValue(property)" />
                </div>

            </div>
            <div class="col-sm-1"><button onclick="@("GetPropertyValue('" + submodelId + "', '" + relativeSubmodelElementPath + "', '" + @GetHashString(pathId + ";Input") + "')")" id="@GetHashString(pathId + ";Retrieve")" type="button" class="btn btn-primary">Retrieve</button></div>
            <div class="col-sm-1"><button onclick="@("SetPropertyValue('" + submodelId + "', '" + relativeSubmodelElementPath + "', '" + @GetHashString(pathId + ";Input") + "', '" + property.ValueType?.ToString() + "', $('#" + @GetHashString(pathId + ";Input") + "').val() )")" id="@GetHashString(pathId + ";Update")" type="button" class="btn btn-success">Update</button></div>

        </div>
    </div>
}
}</text>)(null);

Func<ISubmodelElement, IHtmlContent> ShowModelElementSpecificAttributes = @<text>@{
var submodelElement = item;

if (!Enum.TryParse<KeyElements>(submodelElement.ModelType.Name, out KeyElements keyElements))
{
    return;
}

switch (keyElements)
{
    case KeyElements.GlobalReference:
        break;
    case KeyElements.FragmentReference:
        break;
    case KeyElements.AccessPermissionRule:
        break;
    case KeyElements.AnnotatedRelationshipElement:
        break;
    case KeyElements.BasicEvent:
        break;
    case KeyElements.Blob:
        break;
    case KeyElements.Capability:
        break;
    case KeyElements.ConceptDictionary:
        break;
    case KeyElements.DataElement:
        break;
    case KeyElements.File:
        {
            IFile file = submodelElement?.Cast<IFile>();
            if (file == null)
            {
                return;
            }

            string path = GetPath(file);

            <div class="panel-body">
                <div class="row">
                    <div class="col-sm-2"><b>MimeType</b></div>
                    <div class="col-sm-10">@file.MimeType</div>
                </div>
            </div>
            <div class="panel-body">
                <div class="row">
                    <div class="col-sm-2"><b>Path</b></div>
                    <div class="col-sm-10">@path</div>
                </div>
            </div>
            @if (hostingEnvironment.ContentRootFileProvider.GetFileInfo(path).Exists)
            {
                <div class="panel-body">
                    <div class="row">
                        <object data="@path" style="height:500px; width:100%"></object>
                    </div>
                </div>
            }
        }
        return;
    case KeyElements.Entity:
        break;
    case KeyElements.Event:
        {
            IEvent eventable = submodelElement?.Cast<IEvent>();
            if (eventable == null)
            {
                return;
            }

            @foreach (var element in eventable.DataElements)
            {
                <div class="row">
                    @{ string valueTypeName = element.Cast<IProperty>()?.ValueType?.ToString() ?? "ANY"; }
                    <div class="col-sm-10"><b>@element.IdShort (@valueTypeName)</b></div>
                </div>
            }
        }
        return;
    case KeyElements.MultiLanguageProperty:
        break;
    case KeyElements.Operation:
        break;
    case KeyElements.Property:
        IProperty property = submodelElement?.Cast<IProperty>();
        if (property == null)
        {
            return;
        }

        string propDataTypeName = property.ValueType?.ToString()?.ToUpper();
        if (string.IsNullOrEmpty(propDataTypeName))
        {
            propDataTypeName = property?.ModelType?.Name;
        }

        <div class="panel-body">
            <div class="row">
                <div class="col-sm-2"><b>ValueType</b></div>
                <div class="col-sm-10">@propDataTypeName</div>
            </div>
        </div>
        return;
    case KeyElements.Range:

        IRange range = submodelElement?.Cast<IRange>();
        if (range == null)
        {
            return;
        }

        string rangeDataTypeName = range.ValueType?.ToString()?.ToUpper();
        if (string.IsNullOrEmpty(rangeDataTypeName))
        {
            rangeDataTypeName = range?.ModelType?.Name;
        }

        <div class="panel-body">
            <div class="row">
                <div class="col-sm-2"><b>ValueType</b></div>
                <div class="col-sm-10">@rangeDataTypeName</div>
            </div>
        </div>
        <div class="panel-body">
            <div class="row">
                <div class="col-sm-2"><b>Min-Value</b></div>
                <div class="col-sm-10">@range.Min?.Value</div>
            </div>
        </div>
        <div class="panel-body">
            <div class="row">
                <div class="col-sm-2"><b>Max-Value</b></div>
                <div class="col-sm-10">@range.Max?.Value</div>
            </div>
        </div>
        return;
    case KeyElements.ReferenceElement:
        break;
    case KeyElements.RelationshipElement:
        break;
    case KeyElements.SubmodelElement:
        break;
    case KeyElements.SubmodelElementCollection:
        break;
    case KeyElements.View:
        break;
    case KeyElements.AssetAdministrationShell:
        break;
    case KeyElements.ConceptDescription:
        break;
    default:
        break;
}

}</text>;

Func<IEnumerable<IEmbeddedDataSpecification>, IHtmlContent> ShowDataSpecifications = @<text>@{
var embeddedDataSpecifications = item;
if (embeddedDataSpecifications?.Count() > 0)
{
    @foreach (var dataSpecification in embeddedDataSpecifications)
    {
        <div class="list-group-item" style="background:#88b8d9; color:white">
            <div class="row">
                <div class="col-sm-2"><b>Data-Specification</b></div>
                <div class="col-sm-10">@dataSpecification.HasDataSpecification.First.Value</div>
            </div>
        </div>

        @foreach (var property in dataSpecification.DataSpecificationContent.GetType().GetProperties())
        {

            @if (property.PropertyType.IsGenericType && (property.PropertyType.GetGenericTypeDefinition() == typeof(List<>)))
            {
                var values = property.GetValue(dataSpecification.DataSpecificationContent) as IEnumerable<object>;
                if (values?.Count() > 0)
                {
                    foreach (var element in values)
                    {
                        foreach (var subProperty in property.PropertyType.GenericTypeArguments[0].GetProperties())
                        {
                            var value = subProperty.GetValue(element)?.ToString();
                            if (value != null)
                            {
                                <div class="list-group-item" style="background:#88b8d9; color:white">
                                    <div class="row">
                                        <div class="col-sm-2"><b>@subProperty.Name</b></div>
                                        <div class="col-sm-10">@value</div>
                                    </div>
                                </div>
                            }
                        }
                    }
                }
            }
            else
            {
                var value = property.GetValue(dataSpecification.DataSpecificationContent);
                if (value != null)
                {
                    if (value is IReference reference)
                    {
                        value = reference.First.Value;
                    }
                    else
                    {
                        value = value.ToString();
                    }

                    <div class="list-group-item" style="background:#88b8d9; color:white">
                        <div class="row">
                            <div class="col-sm-2"><b>@property.Name</b></div>
                            <div class="col-sm-10">@value</div>
                        </div>
                    </div>
                }
            }

        }
    }
}
}</text>;

Func<List<object>, IHtmlContent> ShowSubmodelElement = null;

ShowSubmodelElement = @<text>@{
    string submodelId = item[0] as string;
    IElementContainer<ISubmodelElement> submodelElementContainer = item[1] as IElementContainer<ISubmodelElement>;
    string sePathId = submodelElementContainer.Path;
    ISubmodelElement submodelElement = submodelElementContainer.Value;

<div class="panel panel-warning">
    <div class="panel-heading">
        <h4 class="panel-title">
            <a data-toggle="collapse" href="#@GetHashString(sePathId)">@submodelElementContainer.IdShort</a>
        </h4>
    </div>
    <div id="@GetHashString(sePathId)" class="panel-collapse collapse">
        @ShowDataSpecifications(submodelElement.EmbeddedDataSpecifications)
        @ShowDescription(submodelElement.Description)
        @ShowSemanticId(submodelElement.SemanticId)
        @ShowModelElementSpecificAttributes(submodelElement)

        @if (submodelElement is IProperty property)
        {
            @ShowPropertyFooter(submodelId, sePathId, property)
        }
        else if (submodelElement is IOperation operation)
        {
            if (operation.InputVariables?.Count > 0)
            {
                foreach (var argument in operation.InputVariables.ToElementContainer())
                {
                    <div class="panel-body" style="background:#88b8d9">
                        <div class="row">
                            <div class="col-sm-2 argInName @submodelId @operation.IdShort"><b>@argument.IdShort</b></div>
                            <div class="col-sm-2 argInType @submodelId @operation.IdShort">@GetValueOrModelType(argument)</div>
                            <div class="col-sm-8">
                                <div class="input-group">
                                    <span class="input-group-addon"><i class="glyphicon glyphicon-pencil"></i></span>
                                    <input id="msg" type="text" class="form-control argInValue @submodelId  @operation.IdShort" name="msg" placeholder="Argument Value">
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
            if (operation.OutputVariables?.Count > 0)
            {
                foreach (var argument in operation.OutputVariables.ToElementContainer())
                {
                    <div class="panel-body" style="background:#d68dbc">
                        <div class="row">
                            <div class="col-sm-2 argOutName @submodelId @operation.IdShort"><b>@argument.IdShort</b></div>
                            <div class="col-sm-2 argOutType @submodelId @operation.IdShort">@GetValueOrModelType(argument)</div>
                            <div class="col-sm-8">
                                <div class="input-group">
                                    <span class="input-group-addon"><i class="glyphicon glyphicon-pencil"></i></span>
                                    <input id="argOutValue_@submodelId@operation.IdShort@argument.IdShort" type="text" class="form-control argOutValue @submodelId  @operation.IdShort" name="msg" placeholder="Return Value">
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
            <div class="panel-footer"><button onclick="@("ExecuteOperation('" + submodelId + "', '" + operation.IdShort + "')")" type="button" class="btn btn-success">Execute</button></div>
        }
        else if (submodelElementContainer.HasChildren())
        {
            @foreach (var valueChild in submodelElementContainer.Children)
            {
                <div class="panel-body">
                    @ShowSubmodelElement(new List<object>() { submodelId, valueChild })
                </div>
            }
        }
    </div>
</div>
}</text>;
}



<!doctype html>
<html>

<head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" type="image/png" href="~/favicon.png" />
    <link rel="stylesheet" href="~/scripts/bootstrap.min.css">
    <script src="~/scripts/jquery-3.3.1.min.js"></script>
    <script src="~/scripts/popper.min.js"></script>
    <script src="~/scripts/bootstrap.min.js"></script>
    <title>@aas.IdShort - AAS UI</title>
    <style>
        .bd-placeholder-img {
            font-size: 1.125rem;
            text-anchor: middle;
        }

        @@media (min-width: 768px) {
            .bd-placeholder-img-lg {
                font-size: 3.5rem;
            }
        }
    </style>

</head>

<body>
    <nav class="navbar navbar-inverse">
        <div class="container-fluid">
            <div class="navbar-header">
                <img src="~/images/basyxlogo.png" width="160" height="64" />
            </div>
            <ul class="nav navbar-nav">
                <li><a href="#" style="margin-top:15px">Main</a></li>
            </ul>
            <div class="navbar-right">
                <img src="@pathToCompanyLogo" width="103" height="30" style="margin-top:25px; margin-right:15px" />
            </div>
        </div>
    </nav>

    <main role="main" class="container">

        <div class="starter-template">
            <h1>@aas.IdShort - Asset Administration Shell UI</h1>
            <p class="lead">Generic UI to discover the Asset Administration Shell </p>
        </div>
    </main>


    <div class="container">
        <div class="panel panel-default">
            <div class="panel-heading" style="background:#7ca1ce"><h4 style="color:white">Asset Administration Shell</h4></div>
            @ShowIdShort(aas.IdShort)
            @ShowIdentification(aas.Identification)
            @ShowDescription(aas.Description)
        </div>
    </div>
    @{
        var asset = aas.Asset;
        if (asset != null)
        {
            <div class="container">
                <div class="panel panel-default">
                    <div class="panel-heading" style="background:#b90276"><h4 style="color:white">Asset</h4></div>
                    @ShowIdShort(asset.IdShort)
                    @ShowIdentification(asset.Identification)
                    @ShowDescription(asset.Description)
                </div>
            </div>
        }
    }
    @functions
    {
        public string GetPath(IFile file)
        {
            string content = file.Value;
            if (string.IsNullOrEmpty(content))
                return string.Empty;

            content = content.Replace('\\', '/');
            return content;
        }

        public string GetValueOrModelType(ISubmodelElement submodelElement)
        {
            if (submodelElement is IProperty property)
            {
                return property.ValueType?.ToString();
            }
            else
            {
                return submodelElement.ModelType.Name;
            }
        }

        private static string GetHashString(string input)
        {
            SHA256 shaAlgorithm = SHA256.Create();
            byte[] data = Encoding.UTF8.GetBytes(input);

            byte[] bHash = shaAlgorithm.ComputeHash(data);

            string hashString = string.Empty;
            for (int i = 0; i < bHash.Length; i++)
            {
                hashString += bHash[i].ToString("x2");
            }
            var output = Regex.Replace(hashString, @"[\d-]", string.Empty);
            return output;
        }
    }


    @if (aas.Submodels.Count() > 0)
    {
        foreach (var submodel in aas.Submodels)
        {
            <div class="container">
                <div class="panel panel-default">
                    <div class="panel-heading" style="background:darkgreen">
                        <h4>
                            <a style="color:white" data-toggle="collapse" href="#@GetHashString(submodel.IdShort)">@submodel.IdShort</a>
                        </h4>
                    </div>
                    <div id="@GetHashString(submodel.IdShort)" class="panel-collapse collapse">
                        @ShowIdShort(submodel.IdShort)
                        @ShowIdentification(submodel.Identification)
                        @ShowDescription(submodel.Description)
                        @ShowSemanticId(submodel.SemanticId)
                        <div class="panel-body">
                            <div class="panel-group">
                                @{
                                    @if (submodel.SubmodelElements.Count() > 0)
                                    {
                                        <div class="panel panel-default">
                                            <div class="panel-heading" style="background:#005691"><h4 style="color:white">Submodel-Elements</h4></div>
                                            <div class="panel-body">
                                                <div class="panel-group">
                                                    @foreach (var submodelElement in submodel.SubmodelElements.Children)
                                                    {
                                                        if (submodelElement == null)
                                                        { continue; }

                                                        @ShowSubmodelElement(new List<object>() { submodel.IdShort, submodelElement });

                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    }


    <script>
        function uuidv4() {
            return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>
                (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
            );
        }

        function ExecuteOperation(submodelId, pathToOperation) {
            var argNames = document.getElementsByClassName("argInName " + submodelId + " " + pathToOperation);
            var argTypes = document.getElementsByClassName("argInType " + submodelId + " " + pathToOperation);
            var argValues = document.getElementsByClassName("argInValue " + submodelId + " " + pathToOperation);

            var args = [];
            for (var i = 0; i < argNames.length; i++) {
                var value = {
                    idShort: argNames.item(i).innerText,
                    modelType: {
                        name: "Property"
                    },
                    valueType: {
                        dataObjectType: {
                            name: argTypes.item(i).innerText.toLowerCase()
                        }
                    },
                    value: argValues.item(i).value
                };
                var arg = {
                    modelType: {
                        name: "OperationVariable"
                    },
                    value
                };
                args.push(arg);
            }

            var invocationRequest = {
                requestId: uuidv4(),
                inputArguments: args,
                timeout: 30000
            }

            $.ajax({
                type: 'POST',
                url: '/aas/submodels/' + submodelId + '/submodel/submodelElements/' + pathToOperation + '/invoke?async=false',
                contentType: 'application/json',
                data: JSON.stringify(invocationRequest),
                error: function (jqXHR, errorType, exception) {
                    alert("Failed to execute: " + JSON.stringify(invocationRequest));                   
                    alert(jqXHR.responseText + " | " + errorType + " | " + exception);
                },
                success: function (data) {
                    for (var i = 0; i < data.outputArguments.length; i++) {
                        var argOutIdShort = data.outputArguments[i].value.idShort;
                        $('#argOutValue_' + submodelId + pathToOperation + argOutIdShort).val(JSON.stringify(data.outputArguments[i].value.value));
                    }
                }
            });
        }
    </script>
    <script>
        function GetPropertyValue(submodelId, submodelElementId, hashedPathIdInput) {
            $.ajax({
                type: 'GET',
                url: '/aas/submodels/' + submodelId + '/submodel/submodelElements/' + submodelElementId + '/value',
                success: function (data) {
                    $('#' + hashedPathIdInput).val(data);
                    $('#' + hashedPathIdInput).css('border-color', 'green');
                }
            });
        }
    </script>
    <script>
        function SetPropertyValue(submodelId, submodelElementId, hashedPathIdInput, dataObjectTypeName, val) {
            var value =
            {
                valueType: {
                    dataObjectType: {
                        name: dataObjectTypeName
                    }
                },
                value: val
            };
            $.ajax({
                type: 'PUT',
                url: '/aas/submodels/' + submodelId + '/submodel/submodelElements/' + submodelElementId + '/value',
                contentType: 'application/json',
                data: JSON.stringify(value),
                error: function () {
                    $('#' + hashedPathIdInput).css('border-color', 'red');
                    alert("Error updating Property-Value: " + JSON.stringify(value));
                },
                statusCode: {
                    204: function () {
                        $('#' + hashedPathIdInput).css('border-color', 'green');
                    }
                },
                success: function () { }
            });
        }
    </script>

</body>
</html>

